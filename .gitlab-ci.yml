# .gitlab-ci.yml

# Define the default image to be used for all jobs in this CI/CD pipeline.
# We're using a Maven image with OpenJDK 17. You can specify a more precise version
# if needed, e.g., maven:3.8.7-openjdk-17.
image: maven:3.8.7-openjdk-17

# Define stages for your pipeline. This helps organize jobs.
# 'test' is a common stage for running automation suites.
stages:
  - test

# Define a cache to speed up subsequent pipeline runs.
# Maven dependencies are downloaded to the .m2 directory, so caching it avoids
# re-downloading them every time.
cache:
  paths:
    - .m2/repository

# Define the job for running your automation tests.
automation_test_job:
  stage: test # Assign this job to the 'test' stage.
  script:
    # Use 'mvn clean install' to clean the project, compile the code, and install dependencies.
    # This ensures a fresh build and all necessary dependencies are in place.
    # For TestNG, the Maven Surefire Plugin (default for unit tests) or Maven Failsafe Plugin
    # (for integration tests) will automatically pick up and execute your TestNG tests
    # if configured correctly in your pom.xml.
    - echo "Building and running Maven tests..."
    - mvn clean install -B # '-B' for batch mode, which is good for CI/CD environments.

    # If your automation suite has specific test goals or profiles, you can specify them.
    # For example, to run tests from a specific module or with a particular profile:
    # - mvn test -Pyour-profile
    # - mvn -f your-module/pom.xml test

    # Example for running a specific TestNG test class or method:
    # - mvn test -Dtest=com.example.tests.MyTestSuite
    #
    # Example for running tests by TestNG groups:
    # - mvn test -Dgroups="regression"
    #
    # Example for running tests from a specific TestNG XML suite file:
    # - mvn test -Dsurefire.suiteXmlFiles=src/test/resources/testng.xml

    # Ensure your 'pom.xml' has the necessary Surefire/Failsafe plugin configurations
    # to pick up and execute your test classes (e.g., JUnit, TestNG).

  # You can add rules to control when this job runs.
  # For example, to run on pushes to 'main' branch or merge requests.
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_MERGE_REQUEST_IID'
      when: always # Always run this job if the rule matches.

  # Artifacts allow you to save files generated by the job (e.g., test reports).
  # This example saves Surefire/Failsafe test reports.
  artifacts:
    when: always # Always upload artifacts, even if the job fails.
    paths:
      - target/surefire-reports/
      - target/failsafe-reports/
    reports:
      # JUnit reports are automatically parsed by GitLab to show test results in the UI.
      # Surefire/Failsafe plugins generate XML reports that are compatible with JUnit.
      junit:
        - target/surefire-reports/*.xml
        - target/failsafe-reports/*.xml
